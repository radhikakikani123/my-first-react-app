"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _react = _interopRequireWildcard(require("react"));

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) { var desc = Object.defineProperty && Object.getOwnPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : {}; if (desc.get || desc.set) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } } newObj.default = obj; return newObj; } }

function _slicedToArray(arr, i) { return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _nonIterableRest(); }

function _nonIterableRest() { throw new TypeError("Invalid attempt to destructure non-iterable instance"); }

function _iterableToArrayLimit(arr, i) { var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"] != null) _i["return"](); } finally { if (_d) throw _e; } } return _arr; }

function _arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }

function useNumber(initialState) {
  var _useState = (0, _react.useState)(initialState),
      _useState2 = _slicedToArray(_useState, 2),
      num = _useState2[0],
      set = _useState2[1];
  /* Methods */


  var add = function add(addend) {
    return set(num + addend);
  };

  var subtract = function subtract(subtrahend) {
    return set(num - subtrahend);
  };

  var multiply = function multiply(multiplier) {
    return set(num * multiplier);
  };

  var divide = function divide(divisor) {
    return set(num / divisor);
  };

  var pow = function pow(exponent) {
    return set(Math.pow(num, exponent));
  };

  var sqrt = function sqrt() {
    return set(Math.sqrt(num));
  };

  var min = function min() {
    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    return set(Math.min.apply(Math, [min].concat(args)));
  };

  var max = function max() {
    for (var _len2 = arguments.length, args = new Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {
      args[_key2] = arguments[_key2];
    }

    return set(Math.max.apply(Math, [max].concat(args)));
  };

  var isNaN = function isNaN() {
    return Number.isNaN(num);
  };

  var isFinite = function isFinite() {
    return Number.isFinite(num);
  };

  var isInteger = function isInteger() {
    return Number.isInteger(num);
  };

  var isSafeInteger = function isSafeInteger() {
    return Number.isSafeInteger(num);
  };

  var toLocaleString = function toLocaleString() {
    return num.toLocaleString.apply(num, arguments);
  };

  var toString = function toString() {
    return num.toString.apply(num, arguments);
  };

  return {
    value: num,
    set: set,
    add: add,
    subtract: subtract,
    multiply: multiply,
    divide: divide,
    pow: pow,
    sqrt: sqrt,
    min: min,
    max: max,
    isNaN: isNaN,
    isFinite: isFinite,
    isInteger: isInteger,
    isSafeInteger: isSafeInteger,
    toLocaleString: toLocaleString,
    toString: toString,

    get length() {
      return num.length;
    }

  };
}

var _default = useNumber;
exports.default = _default;