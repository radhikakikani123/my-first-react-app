{"remainingRequest":"/home/jose/projects/personal/use-react/node_modules/babel-loader/lib/index.js?{\"presets\":[\"@babel/env\",\"@babel/preset-react\",[\"/home/jose/projects/personal/use-react/node_modules/docz/node_modules/babel-preset-docz/dist/index.js\",{\"flow\":true,\"typescript\":false,\"parseProps\":true}]],\"plugins\":[\"@babel/plugin-proposal-class-properties\",\"@babel/plugin-proposal-object-rest-spread\",[\"/home/jose/projects/personal/use-react/node_modules/docz-utils/lib/named-asset-import.js\",{\"loaderMap\":{\"svg\":{\"ReactComponent\":\"@svgr/webpack?-prettier,-svgo![path]\"}}}],\"/home/jose/projects/personal/use-react/node_modules/react-hot-loader/babel.js\"],\"env\":{\"production\":{\"plugins\":[\"@babel/plugin-transform-react-constant-elements\",\"@babel/plugin-syntax-export-default-from\"]}},\"cacheDirectory\":true,\"babelrc\":false}!/home/jose/projects/personal/use-react/src/useNumber/useNumber.js","dependencies":[{"path":"/home/jose/projects/personal/use-react/src/useNumber/useNumber.js","mtime":1547026407089},{"path":"/home/jose/projects/personal/use-react/node_modules/cache-loader/dist/cjs.js","mtime":1542181141139},{"path":"/home/jose/projects/personal/use-react/node_modules/babel-loader/lib/index.js","mtime":1538980571356}],"contextDependencies":[],"result":["(function () {\n  var enterModule = require('react-hot-loader').enterModule;\n\n  enterModule && enterModule(module);\n})();\n\nfunction _slicedToArray(arr, i) { return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _nonIterableRest(); }\n\nfunction _nonIterableRest() { throw new TypeError(\"Invalid attempt to destructure non-iterable instance\"); }\n\nfunction _iterableToArrayLimit(arr, i) { var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i[\"return\"] != null) _i[\"return\"](); } finally { if (_d) throw _e; } } return _arr; }\n\nfunction _arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }\n\nimport React, { useState } from 'react';\n\nfunction useNumber(initialState) {\n  var _useState = useState(initialState),\n      _useState2 = _slicedToArray(_useState, 2),\n      num = _useState2[0],\n      set = _useState2[1];\n  /* Methods */\n\n\n  var add = function add(addend) {\n    return set(num + addend);\n  };\n\n  var subtract = function subtract(subtrahend) {\n    return set(num + subtrahend);\n  };\n\n  var multiply = function multiply(multiplier) {\n    return set(num * multiplier);\n  };\n\n  var divide = function divide(divisor) {\n    return set(num / divisor);\n  };\n\n  var pow = function pow(exponent) {\n    return set(Math.pow(num, exponent));\n  };\n\n  var sqrt = function sqrt() {\n    return set(Math.sqrt(num));\n  };\n\n  var min = function min() {\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    return set(Math.min.apply(Math, [min].concat(args)));\n  };\n\n  var max = function max() {\n    for (var _len2 = arguments.length, args = new Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {\n      args[_key2] = arguments[_key2];\n    }\n\n    return set(Math.max.apply(Math, [max].concat(args)));\n  };\n\n  var isNaN = function isNaN() {\n    return Number.isNaN(num);\n  };\n\n  var isFinite = function isFinite() {\n    return Number.isFinite(num);\n  };\n\n  var isInteger = function isInteger() {\n    return Number.isInteger(num);\n  };\n\n  var isSafeInteger = function isSafeInteger() {\n    return Number.isSafeInteger(num);\n  };\n\n  var toLocaleString = function toLocaleString() {\n    return num.toLocaleString.apply(num, arguments);\n  };\n\n  var toString = function toString() {\n    return num.toString.apply(num, arguments);\n  };\n\n  return {\n    value: num,\n    set: set,\n    add: add,\n    subtract: subtract,\n    multiply: multiply,\n    divide: divide,\n    pow: pow,\n    sqrt: sqrt,\n    min: min,\n    max: max,\n    isNaN: isNaN,\n    isFinite: isFinite,\n    isInteger: isInteger,\n    isSafeInteger: isSafeInteger,\n    toLocaleString: toLocaleString,\n    toString: toString,\n\n    get length() {\n      return num.length;\n    }\n\n  };\n}\n\nvar _default = useNumber;\nexport default _default;\n;\n\n(function () {\n  var reactHotLoader = require('react-hot-loader').default;\n\n  var leaveModule = require('react-hot-loader').leaveModule;\n\n  if (!reactHotLoader) {\n    return;\n  }\n\n  reactHotLoader.register(useNumber, \"useNumber\", \"/home/jose/projects/personal/use-react/src/useNumber/useNumber.js\");\n  reactHotLoader.register(_default, \"default\", \"/home/jose/projects/personal/use-react/src/useNumber/useNumber.js\");\n  leaveModule(module);\n})();\n\n;",{"version":3,"sources":["/home/jose/projects/personal/use-react/src/useNumber/useNumber.js"],"names":["React","useState","useNumber","initialState","num","set","add","addend","subtract","subtrahend","multiply","multiplier","divide","divisor","pow","exponent","Math","sqrt","min","args","max","isNaN","Number","isFinite","isInteger","isSafeInteger","toLocaleString","toString","value","length"],"mappings":"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","sourcesContent":["import React, { useState } from 'react';\n\nfunction useNumber(initialState) {\n    const [num, set] = useState(initialState);\n\n    /* Methods */\n    const add = addend => set(num + addend);\n    const subtract = subtrahend => set(num + subtrahend);\n    const multiply = multiplier => set(num * multiplier);\n    const divide = divisor => set(num / divisor);\n\n    const pow = exponent => set(Math.pow(num, exponent));\n    const sqrt = () => set(Math.sqrt(num));\n\n    const min = (...args) => set(Math.min(min, ...args));\n    const max = (...args) => set(Math.max(max, ...args));\n\n    const isNaN = () => Number.isNaN(num);\n    const isFinite = () => Number.isFinite(num);\n    const isInteger = () => Number.isInteger(num);\n    const isSafeInteger = () => Number.isSafeInteger(num);\n\n    const toLocaleString = (...args) => num.toLocaleString(...args);\n    const toString = (...args) => num.toString(...args);\n\n    return {\n        value: num,\n        set,\n        add,\n        subtract,\n        multiply,\n        divide,\n        pow,\n        sqrt,\n        min,\n        max,\n        isNaN,\n        isFinite,\n        isInteger,\n        isSafeInteger,\n        toLocaleString,\n        toString,\n        get length() {\n            return num.length;\n        },\n    };\n}\n\nexport default useNumber;\n"]}]}